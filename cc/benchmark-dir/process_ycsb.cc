#include <cstdio>
#include <fstream>
#include <iostream>
#include <stdlib.h>
#include <string>

#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>

#include "boost/program_options.hpp"

using namespace boost::program_options;

int main(int argc, char* argv[]) {
  // The set of supported command line options.
  options_description desc("Allowed options");
  desc.add_options()
    ("help", "Produce a help message and exit")
    ("from", value<std::string>()->default_value("ycsb.load.raw"),
       "File containing requests generated by YCSB")
    ("dest", value<std::string>()->default_value("ycsb.load"),
       "File to put parsed requests into")
    ("prefix", value<std::string>()->default_value("usertable user"),
       "String that keys in `from' are prefixed with")
  ;

  // Parse command line options into a variable map.
  variables_map vm;
  store(parse_command_line(argc, argv, desc), vm);
  notify(vm);

  if (vm.count("help")) {
    std::cout << desc << std::endl;
    return 1;
  }

  std::string from(vm["from"].as<std::string>());
  std::string dest(vm["dest"].as<std::string>());
  const std::string prefix(vm["prefix"].as<std::string>());

  std::ifstream from_file(from);
  if (!from_file.is_open()) {
    std::cout << "Failed to open " << from << std::endl;
    exit(-1);
  }

  std::ofstream to_file(dest);
  if (!to_file.is_open()) {
    std::cout << "Failed to open " << dest << std::endl;
    exit(-1);
  }

  uint64_t count = 0;
  while (!from_file.eof()) {
    if (!from_file.good()) {
      std::cout << "ERROR: Input stream for " << from <<
                   " is in a bad state" << std::endl;
      exit(-1);
    }

    if (!to_file.good()) {
      std::cout << "ERROR: Output stream for " << dest <<
                   " is in a bad state" << std::endl;
      exit(-1);
    }

    /// XXX getline can fail if it does not find a delimiter within the first
    /// n bytes of a line. If it fails, then try increasing n to a larger value.
    static const int n = 1024;
    char buffer[n];
    if (!from_file.getline(buffer, n)) {
      std::cout << "Failed to read from " << from << std::endl;
      exit(-1);
    }

    std::string line(buffer);
    std::string::size_type pos = line.find(prefix);
    if (pos == std::string::npos) {
      continue;
    }

    line = line.substr(pos + prefix.size());
    uint64_t key = stol(line);

    to_file.write(reinterpret_cast<char*>(&key), sizeof(key));
    count++;
  }

  std::cout << "Processed " << count << " keys" << std::endl;
}
